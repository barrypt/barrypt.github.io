<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Java - Category -</title><link>https://blog.yudlk.com/categories/java/</link><description>Java - Category -</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>qupengtao0116@163.com (qpt)</managingEditor><webMaster>qupengtao0116@163.com (qpt)</webMaster><lastBuildDate>Fri, 15 Mar 2019 16:00:00 +0000</lastBuildDate><atom:link href="https://blog.yudlk.com/categories/java/" rel="self" type="application/rss+xml"/><item><title>ReentrantLock源码分析</title><link>https://blog.yudlk.com/posts/java/08-reentrantlock/</link><pubDate>Fri, 15 Mar 2019 16:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/08-reentrantlock/</guid><description><![CDATA[<p>本文主要对<code>ReentrantLock</code>的源码进行了简单的分析，具体包括<code>ReentrantLock</code>的初始化(公平锁和非公平锁)，加锁过程和解锁过程等。</p>]]></description></item><item><title>Java运行时数据区</title><link>https://blog.yudlk.com/posts/java/07-jvm-runtime-area/</link><pubDate>Sun, 24 Feb 2019 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/07-jvm-runtime-area/</guid><description><![CDATA[<p>本文主要讲的是Java运行时数据区，包括线程私有的<code>程序计数器</code>，<code>虚拟机栈</code>，<code>本地方法栈</code>和线程共享的<code>堆</code>，<code>方法区</code>等。</p>]]></description></item><item><title>Synchronize和Volatile底层实现原理</title><link>https://blog.yudlk.com/posts/java/06-two-volatile-synchronized/</link><pubDate>Wed, 06 Feb 2019 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/06-two-volatile-synchronized/</guid><description><![CDATA[<p>最近在看<code>并发编程的艺术</code>这本书，希望加深对并发这块的理解。毕竟并发相关还是十分重要的。本文主要是关于<code>第二章Java并发机制的底层实现原理</code>的相关笔记。主要包括<code>volatile</code>,<code>synchronized</code>,<code>原子操作</code>等实现原理的分析。</p>]]></description></item><item><title>几种常见排序算法的Java实现</title><link>https://blog.yudlk.com/posts/java/05-java-sorts/</link><pubDate>Sun, 20 Jan 2019 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/05-java-sorts/</guid><description><![CDATA[<p>本文主要记录了几种常见的排序算法的Java实现，如<code>冒泡排序</code>、<code>快速排序</code>、<code>直接插入排序</code>、<code>希尔排序</code>、<code>选择排序</code>等等。</p>]]></description></item><item><title>Java常用设计模式(十)---观察者模式</title><link>https://blog.yudlk.com/posts/java/design-pattern/10-observer/</link><pubDate>Tue, 25 Dec 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/design-pattern/10-observer/</guid><description>&lt;p>本文主要介绍了Java23种设计模式中的观察者模式，并结合实例描述了观察者模式的具体实现和优缺点分析。&lt;/p></description></item><item><title>Java常用设计模式(九)---模板方法模式</title><link>https://blog.yudlk.com/posts/java/design-pattern/09-template/</link><pubDate>Sun, 23 Dec 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/design-pattern/09-template/</guid><description>&lt;p>本文主要介绍了Java23种设计模式中的模板方法模式，并结合实例描述了模板方法模式的具体实现和优缺点分析。&lt;/p></description></item><item><title>Java常用设计模式(八)---策略模式</title><link>https://blog.yudlk.com/posts/java/design-pattern/08-strategy/</link><pubDate>Wed, 19 Dec 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/design-pattern/08-strategy/</guid><description>&lt;p>本文主要介绍了Java23种设计模式中的策略模式，并结合实例描述了策略模式的具体实现和策略模式的优缺点分析。&lt;/p></description></item><item><title>Java常用设计模式(七)---外观模式</title><link>https://blog.yudlk.com/posts/java/design-pattern/07-facade/</link><pubDate>Mon, 17 Dec 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/design-pattern/07-facade/</guid><description>&lt;p>本文主要介绍了Java23种设计模式中的外观模式，并结合实例描述了 模式的具体实现和性能分析测试。&lt;/p></description></item><item><title>Java常用设计模式(六)---代理模式</title><link>https://blog.yudlk.com/posts/java/design-pattern/06-proxy/</link><pubDate>Wed, 05 Dec 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/design-pattern/06-proxy/</guid><description><![CDATA[<p>本文主要介绍了Java23种设计模式中的代理模式，并结合实例描述了各种代理模式的具体实现和对比。包括：<code>JDK静态代理</code>，<code>JDK动态代理</code>，<code>cglib动态代理</code>.</p>]]></description></item><item><title>volatile关键字在单例模式(双重校验锁)中的作用</title><link>https://blog.yudlk.com/posts/java/design-pattern/01ex2-java-volatile-double-check-lock/</link><pubDate>Mon, 03 Dec 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/design-pattern/01ex2-java-volatile-double-check-lock/</guid><description>&lt;p>本文主要讲述了Java单例模式之双重校验锁中&lt;code>volatile&lt;/code>关键字的作用。&lt;/p></description></item></channel></rss>