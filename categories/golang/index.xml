<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Golang - Category -</title><link>https://blog.yudlk.com/categories/golang/</link><description>Golang - Category -</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>qupengtao0116@163.com (qpt)</managingEditor><webMaster>qupengtao0116@163.com (qpt)</webMaster><lastBuildDate>Fri, 08 Jul 2022 22:00:00 +0000</lastBuildDate><atom:link href="https://blog.yudlk.com/categories/golang/" rel="self" type="application/rss+xml"/><item><title>Go exec 包执行命令超时失效问题分析及解决方案</title><link>https://blog.yudlk.com/posts/go/exex-cmd-timeout/</link><pubDate>Fri, 08 Jul 2022 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/go/exex-cmd-timeout/</guid><description>&lt;p>本文主要从源码层面分析了 Go exec 包执行命令超时失效问题，找出具体原因并给出相关解决方案。&lt;/p></description></item><item><title>Go语言之 chan 源码分析</title><link>https://blog.yudlk.com/posts/go/chan/</link><pubDate>Sat, 12 Mar 2022 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/go/chan/</guid><description>&lt;p>本文主要介绍了 Go 语言(golang)中的 chan，并从源码层面分析其具体实现，包括创建 channel，发送数据，接收数据以及相关调度等。&lt;/p></description></item><item><title>Go语言之使用 swaggo 一键生成 API 文档</title><link>https://blog.yudlk.com/posts/go/swagger/</link><pubDate>Fri, 07 Jan 2022 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/go/swagger/</guid><description>&lt;p>本文主要记录了如何在 Go 中使用 swaggo 根据注释自动生成 API 文档，以及如何使用条件编译来降低二进制文件大小。&lt;/p></description></item><item><title>Go语言之sync.Mutex 源码分析</title><link>https://blog.yudlk.com/posts/go/sync-mutex/</link><pubDate>Fri, 05 Nov 2021 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/go/sync-mutex/</guid><description><![CDATA[<p>Go 语言在 <code>sync</code> 包中提供了用于同步的一些基本原语,<code>sync.Mutex</code> 就是其中最常用的一个。</p>]]></description></item><item><title>Go语言之 Context 实战与源码分析</title><link>https://blog.yudlk.com/posts/go/context/</link><pubDate>Fri, 22 Oct 2021 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/go/context/</guid><description>&lt;p>本文主要简单介绍了Go语言(golang)中的&lt;code>context&lt;/code>包。给出了context 的基本用法和使用建议，并从源码层面对其底层结构和具体实现原理进行分析。&lt;/p></description></item><item><title>Go语言之 sync.pool 源码分析</title><link>https://blog.yudlk.com/posts/go/sync-pool/</link><pubDate>Fri, 15 Oct 2021 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/go/sync-pool/</guid><description>&lt;p>本文主要介绍了Go语言(golang)中的&lt;code>sync.pool&lt;/code>包。给出了 sync.pool 的基本用法，以及各大框架中的使用案例。并从源码层面对其底层结构和具体实现原理进行分析。&lt;/p></description></item><item><title>Go语言之防缓存穿透利器Singleflight</title><link>https://blog.yudlk.com/posts/go/singleflight/</link><pubDate>Fri, 16 Jul 2021 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/go/singleflight/</guid><description>&lt;p>本文主要分析了 Golang 中的一个第三方库，防缓存击穿利器 singleflight，包括基本使用和源码分析。&lt;/p></description></item><item><title>Go语言sync.Cond源码分析</title><link>https://blog.yudlk.com/posts/go/cond/</link><pubDate>Thu, 05 Nov 2020 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/go/cond/</guid><description>1. 概述 Golang 的 sync 包中的 Cond 实现了一种条件变量，可以使用在多个Reader等待共享资源 ready 的场景（如果只有一读一写，一个锁或者channel就搞定了）</description></item><item><title>Go语言测试 gotest</title><link>https://blog.yudlk.com/posts/go/gotest/</link><pubDate>Sat, 25 Jul 2020 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/go/gotest/</guid><description>&lt;p>本来主要为 Go 语言中的测试工具 go test 使用指南，最后顺便测试了一下几种字符串拼接方式的性能差距。&lt;/p></description></item><item><title>Go语言之pprof性能分析利器</title><link>https://blog.yudlk.com/posts/go/pprof/</link><pubDate>Fri, 17 Jul 2020 12:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/go/pprof/</guid><description>&lt;p>本文主要记录了 Go 语言中的性能分析利器 pprof 的基本使用，包括 Profiling 采集、可视化分析和火焰图的生成与查看等。&lt;/p></description></item></channel></rss>