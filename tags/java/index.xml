<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Java - Tag -</title><link>https://blog.yudlk.com/tags/java/</link><description>Java - Tag -</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>qupengtao0116@163.com (qpt)</managingEditor><webMaster>qupengtao0116@163.com (qpt)</webMaster><lastBuildDate>Fri, 15 Mar 2019 16:00:00 +0000</lastBuildDate><atom:link href="https://blog.yudlk.com/tags/java/" rel="self" type="application/rss+xml"/><item><title>ReentrantLock源码分析</title><link>https://blog.yudlk.com/posts/java/08-reentrantlock/</link><pubDate>Fri, 15 Mar 2019 16:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/08-reentrantlock/</guid><description><![CDATA[<p>本文主要对<code>ReentrantLock</code>的源码进行了简单的分析，具体包括<code>ReentrantLock</code>的初始化(公平锁和非公平锁)，加锁过程和解锁过程等。</p>]]></description></item><item><title>Java运行时数据区</title><link>https://blog.yudlk.com/posts/java/07-jvm-runtime-area/</link><pubDate>Sun, 24 Feb 2019 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/07-jvm-runtime-area/</guid><description><![CDATA[<p>本文主要讲的是Java运行时数据区，包括线程私有的<code>程序计数器</code>，<code>虚拟机栈</code>，<code>本地方法栈</code>和线程共享的<code>堆</code>，<code>方法区</code>等。</p>]]></description></item><item><title>Synchronize和Volatile底层实现原理</title><link>https://blog.yudlk.com/posts/java/06-two-volatile-synchronized/</link><pubDate>Wed, 06 Feb 2019 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/06-two-volatile-synchronized/</guid><description><![CDATA[<p>最近在看<code>并发编程的艺术</code>这本书，希望加深对并发这块的理解。毕竟并发相关还是十分重要的。本文主要是关于<code>第二章Java并发机制的底层实现原理</code>的相关笔记。主要包括<code>volatile</code>,<code>synchronized</code>,<code>原子操作</code>等实现原理的分析。</p>]]></description></item><item><title>几种常见排序算法的Java实现</title><link>https://blog.yudlk.com/posts/java/05-java-sorts/</link><pubDate>Sun, 20 Jan 2019 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/05-java-sorts/</guid><description><![CDATA[<p>本文主要记录了几种常见的排序算法的Java实现，如<code>冒泡排序</code>、<code>快速排序</code>、<code>直接插入排序</code>、<code>希尔排序</code>、<code>选择排序</code>等等。</p>]]></description></item><item><title>volatile关键字在单例模式(双重校验锁)中的作用</title><link>https://blog.yudlk.com/posts/java/design-pattern/01ex2-java-volatile-double-check-lock/</link><pubDate>Mon, 03 Dec 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/design-pattern/01ex2-java-volatile-double-check-lock/</guid><description>&lt;p>本文主要讲述了Java单例模式之双重校验锁中&lt;code>volatile&lt;/code>关键字的作用。&lt;/p></description></item><item><title>Java中为什么内部类可以访问外部类的成员</title><link>https://blog.yudlk.com/posts/java/04-java-innerclass-outerclass-membervariable/</link><pubDate>Sat, 18 Aug 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/04-java-innerclass-outerclass-membervariable/</guid><description>&lt;p>本文主要通过实例源码与反编译详细分析了Java中为什么内部类可以访问外部类的成员。&lt;/p></description></item><item><title>Java中为什么方法内定义的内部类可以访问方法中的局部变量</title><link>https://blog.yudlk.com/posts/java/03-java-innerclass-localvariable/</link><pubDate>Fri, 17 Aug 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/03-java-innerclass-localvariable/</guid><description>&lt;p>本文主要通过实例代码分析了 Java 中为什么方法内定义的内部类可以访问方法中的局部变量。&lt;/p></description></item><item><title>MVC和三层架构及SSM框架整合</title><link>https://blog.yudlk.com/posts/java/02-mvc-ssm-merge/</link><pubDate>Wed, 15 Aug 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/02-mvc-ssm-merge/</guid><description>&lt;p>本文主要讲了MVC和三层架构的关系，和SSM框架整合教程。&lt;/p></description></item><item><title>String字符串详解</title><link>https://blog.yudlk.com/posts/java/01-java-string/</link><pubDate>Fri, 10 Aug 2018 22:00:00 +0000</pubDate><author>qpt</author><guid>https://blog.yudlk.com/posts/java/01-java-string/</guid><description>&lt;p>本文主要分析了 Java中的 String 字符串相关使用与优化方案，包括 String 类型相加的本质、String 字符串相关编译器优化、 StringBuilder 与 StringBuffer 选择、字符串拼接方法、基本类型转 String 类型等。&lt;/p></description></item></channel></rss>